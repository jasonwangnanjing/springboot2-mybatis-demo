<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 ，为了使用接口动态代理，这里必须是接口的全路径名-->
<mapper namespace="com.jw.dao.UserDao">
    <!--
       1.#{},预编译的方式preparedstatement，使用占位符替换，防止sql注入，一个参数的时候，任意参数名可以接收
       2.${},普通的Statement，字符串直接拼接，不可以防止sql注入，一个参数的时候，必须使用${value}接收参数
       -->
    <!-- enable cache for name space dao.UserMapper cache's configuration readOnly will cause zangdu-->
<!--    <cache-ref namespace="dao.OrderMapper"/>-->
    <cache flushInterval="60000" eviction="FIFO" size="512" readOnly="false"/>



    <resultMap id="resultUser" type="UserDomain">
        <id column="id" property="id"/>
        <result column="user_name" property="userName"/>
    </resultMap>


<!--    <resultMap id="OrderUserResultMap" type="Order" autoMapping="true">-->
<!--        <id column="id" property="id"/>-->
<!--        &lt;!&ndash;association:完成子对象的映射&ndash;&gt;-->
<!--        &lt;!&ndash;property:子对象在父对象中的属性名&ndash;&gt;-->
<!--        &lt;!&ndash;javaType:子对象的java类型&ndash;&gt;-->
<!--        &lt;!&ndash;autoMapping:完成子对象的自动映射，若开启驼峰，则按驼峰匹配&ndash;&gt;-->
<!--        <association property="user" javaType="User" autoMapping="true">-->
<!--            <id column="user_id" property="id"/>-->
<!--        </association>-->
<!--    </resultMap>-->

     <!--&lt;!&ndash;sql id could be reused by different operation  &ndash;&gt;-->
    <sql id="commonField">
    id,
    user_name,
    password,
    name,
    age,
    sex,
    birthday,
    created,
    updated
    </sql>

    <!--&lt;!&ndash; 新增的Statement-->
       <!--id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致-->
       <!--parameterType：参数的类型，使用动态代理之后和方法的参数类型一致-->
       <!--useGeneratedKeys:开启主键回写-->
       <!--keyColumn：指定数据库的主键-->
       <!--keyProperty：主键对应的pojo属性名-->
     <!--&ndash;&gt;-->
    <insert id="insertUser" useGeneratedKeys="true" keyColumn="id" keyProperty="id"
            parameterType="UserDomain">
        INSERT INTO tb_user (

        user_name,
        password,
        name,
        age,
        sex,
        birthday,
        created,
        updated
        )
        VALUES
        (

        #{userName},
        #{password},
        #{name},
        #{age},
        #{sex},
        #{birthday},
        NOW(),
        NOW()
        );
    </insert>
    <!--&lt;!&ndash;-->
       <!--更新的statement-->
       <!--id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致-->
       <!--parameterType：参数的类型，使用动态代理之后和方法的参数类型一致-->
     <!--&ndash;&gt;-->
    <!--// delete/insert/update operation could be configed to flushCache 'false'-->
    <!--// per default. it was set to 'true' means cache will be flushed.-->
    <update id="updateUser" parameterType="UserDomain" flushCache="true">
        UPDATE tb_user
        <trim prefix="set" suffixOverrides=",">
            <if test="userName!=null">user_name = #{userName},</if>
            <if test="password!=null">password = #{password},</if>
            <if test="name!=null">name = #{name},</if>
            <if test="age!=null">age = #{age},</if>
            <if test="sex!=null">sex = #{sex},</if>
            <if test="birthday!=null">birthday = #{birthday},</if>
            updated = now(),

        </trim>
        WHERE
        (id = #{id}) and (sex = 0);
    </update>
    <!--&lt;!&ndash;-->
       <!--删除的statement-->
       <!--id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致-->
       <!--parameterType：参数的类型，使用动态代理之后和方法的参数类型一致-->
     <!--&ndash;&gt;-->
    <delete id="deleteUserById" parameterType="java.lang.String">
        delete from tb_user where id=#{id}
    </delete>


<!--    <select id="queryOrderWithUserByOrderNumber" resultMap="OrderUserResultMap">-->
<!--      select * from tb_order o left join tb_user u on o.user_id=u.id where o.order_number = #{number}-->
<!--    </select>-->

    <!--&lt;!&ndash;include refid could reuse defined sql id  &ndash;&gt;-->
    <select id="queryUserByTableName" resultMap="resultUser">
        select * from ${tableName}
    </select>

    <select id="login" resultType="UserDomain">
        select * from tb_user where user_name = #{userName} and password = #{password}
    </select>

    <!--&lt;!&ndash; statement，内容：sql语句。-->
       <!--id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致-->
       <!--resultType：sql语句查询结果集的封装类型，使用动态代理之后和方法的返回类型一致；resultMap：二选一-->
       <!--parameterType：参数的类型，使用动态代理之后和方法的参数类型一致-->
     <!--&ndash;&gt;-->
    <select id="queryUserById" resultType="UserDomain">
        select * from tb_user where id = #{id}
    </select>
    <select id="queryUserAll" resultType="UserDomain">
        select * from tb_user
    </select>
    <select id="selectUsers" resultType="UserDomain">
        select * from tb_user
    </select>

</mapper>